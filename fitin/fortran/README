Fortran bridge for FITIn
=========================

This can embed FITIn into Fortran source code in a similar fashion to C code.


BUILD
======

0.) Create Valgrind and FITIn.

1.) Create the object file of the C-Code. You need to add the headers of 
    Valgrind:

    $ cc -I<path to Valgrind include> -c fi_client.c -o fi_client.o

2.) Create the fortran interface and module.

    $ gfortran -c fitin.F95 -o fitin.o


USE
====

1.) In the Fortran code where you want to use FITIn, place where suitable:
    
    #include "fi_client.F95"

2.) In your subroutine or program, add to the preamble:

    USE FITIN

3.) Place where desired:
 
    call FITIN_MONITOR_VARIABLE(<variable>)

    and to unmonitor:

    call FITIN_UNMONITOR_VARIABLE(<variable>)

4.) If you rely on procedure names, do not forget to enable debug symbols
    (-g on gfortran).

5.) Add this directory to the include-path on compiling for having
    fi_client.F95.

5.) Add fitin.o and fi_client.o to to your linking command.


NOTES
======

As we performed experiments on F90 code using high optimziation levels 
(-O3), we want to provide some hints:

* "main" in C is "MAIN__" in Fortran.
* As FITIn macros can be placed behind the end of the preamble of
  variables exclusively, in -O3, the variables may have vanished into
  registers already. This can be noticed when looking at the summary
  output of FITIn: In case of a single variable or all variables being
  ghostly, it says "Monitored variable accesses: 0". SOLUTION: Declare
  the variables in question VOLATILE (On heavy use, this might decrease
  the performance).
* If you use Fortran variables from different code modules and you want
  to monitor them locally, you can try aliasing them by local (volatile)
  variables:

  USE extmod, ONLY: msvctr

  INTEGER, VOLATILE :: msvct_r

  msvct_r = msvctr

  #define mscvtr msvct_r

  FITIN_MONITOR_VARIABLE(msvct_r)
  ...
  FITIN_UNMONITOR_VARIABLE(msvct_r)

* Be careful with randomized flips, even if the code does not seem to
  use pointers or field indices. Often, Fortran assembly makes use of
  them anyway. Flipping such values will result in segmentation faults.
* On difficulties scheduling flips precisely, you should read the
  assembly code of the program: Sometimes, there are unforeseen copy
  or cast operations.

