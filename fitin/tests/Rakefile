require "fileutils"
require "json"
require "stringio"
require "tempfile"
require "benchmark"

$LOAD_PATH << File.dirname(__FILE__)

require "rake.config"

$SUCCESS = 0

#------------------------------------------------------------------------------
task :tests => [:build_tests] do
  test_data_records.each do |test|
    run_test(test)
  end

  puts "[RESULT] #{$SUCCESS}/#{test_data_records.count} successful"
end

#------------------------------------------------------------------------------
task :clean do
  Rake::Task["clean_tests"].invoke
end

#------------------------------------------------------------------------------
task :benchmark_dhry => [:build_dhry_benchmark] do
  log_file = Tempfile.new("dhry")

  begin
    puts "[RUN] Dhry without Valgrind"
    time1 = Benchmark.realtime do
      BENCHMARK_RUNS.times do
        print "* "
        silent { sh "#{bin_output("dhry")} &> /dev/null" }
      end
    end
    puts "\n[RESULT] avg: #{time1/BENCHMARK_RUNS}s"

    puts "[RUN] Dhry with Valgrind and --tool=none"
    time2 = Benchmark.realtime do
      BENCHMARK_RUNS.times do
        print "* "
        silent { sh "#{VALGRIND} --log-file=#{log_file.path} --tool=none #{bin_output("dhry")} 2>&1 > /dev/null" }
      end
    end
    puts "\n[RESULT] avg: #{time2/BENCHMARK_RUNS}s"

    puts "[RUN] Dhry with Valgrind and --tool=fitin"
    time3 = Benchmark.realtime do
      BENCHMARK_RUNS.times do
        print "* "
        silent { sh "#{VALGRIND} --log-file=#{log_file.path} --tool=fitin #{BENCHMARK_DHRY_VG} #{bin_output("dhry")} 2>&1 > /dev/null" }
      end
    end
    puts "\n[RESULT] avg: #{time3/BENCHMARK_RUNS}s"
  ensure
    log_file.close
    File.unlink(log_file)
  end
end

#------------------------------------------------------------------------------
task :clean_tests do
  test_data_records.each do |test|
    test["files"].each do |c_file|
      unlink(object_file(c_file))
    end
  end

  FileUtils.rm_rf(local(TEST_BIN))
  unlink(local(TEST_BUILT_FILE))
end

#------------------------------------------------------------------------------
task :build_tests do
  time = last_build_time

  test_data_records.each do |test|
    build_test(test, time)
  end

  set_built_marker 
end

#------------------------------------------------------------------------------
task :build_dhry_benchmark do
  test_data_records.select { |test| test["output"] == "dhry" }.each do |test|
    build_test(test, last_build_time)
  end
end

#------------------------------------------------------------------------------
def analyze_output(out, expected)
  normalized = out.chop.gsub(/\n/, " ")

  if !expected || normalized == expected
    $SUCCESS += 1
  else
    puts "[ERROR] expected: #{expected}, got: #{normalized}"
  end
end

#------------------------------------------------------------------------------
def bin_output(name)
  local(TEST_BIN, name)
end

#------------------------------------------------------------------------------
def build_test(test, time)
  link = false 

  test["files"].each do |src|
    if !time || File.atime(src) > time
      sh "#{CC} #{CFLAGS} #{test["cflags"]} -c #{src} -o #{object_file(src)}"
      link = true
    end
  end

  if link
    FileUtils.mkdir_p(local("bin"))

    objects = test["files"].map { |src| object_file(src) }
    sh "#{CC} #{LDFLAGS} -o #{bin_output(test["output"])} #{objects.join(" ")}"
  end
end

#------------------------------------------------------------------------------
def last_build_time
  if File.exists?(local(TEST_BUILT_FILE))
    File.atime(local(TEST_BUILT_FILE))
  end
end

#------------------------------------------------------------------------------
def local(*args)
  File.join(File.dirname(__FILE__), args)
end

#------------------------------------------------------------------------------
def object_file(c_file)
  "#{File.basename(c_file, ".c")}.o"
end

#------------------------------------------------------------------------------
def run_test(test)
  puts "[RUN] #{test["title"]} (#{test["output"]})" 
  # this will suppress more output of VG
  log_file = Tempfile.new(test["output"])
  out = ""

  begin
    silent do 
      out = %x(#{VALGRIND} --log-file=#{log_file.path} #{VG_FLAGS} #{test["vg_params"]} #{bin_output(test["output"])} 2>&1)
    end

    if $?.exitstatus == 0
      analyze_output(out, test["expected"])
    else
      puts "[ERROR] Program returned exit code #{$?.exitstatus}"
    end
  ensure
    log_file.close
    File.unlink(log_file)
  end
end

#------------------------------------------------------------------------------
def set_built_marker
  sh "touch #{local(TEST_BUILT_FILE)}"
end

#------------------------------------------------------------------------------
def silent(&block)
  stdout = $stdout
  stderr = $stderr
  $stderr = $stdout = StringIO.new

  begin
    yield
  ensure
    $stdout = stdout
    $stderr = stderr
  end
end

#------------------------------------------------------------------------------
def test_data_records
  data = JSON.parse(File.read(local(TEST_DATA)))

  data["tests"]
end

#------------------------------------------------------------------------------
def unlink(file)
  if File.exists?(file)
    File.unlink(file)
  end
end
