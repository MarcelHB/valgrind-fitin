#--------------------------------------------------------------------
#--- FITIn Test Suite
#--------------------------------------------------------------------

#
#   This file is part of the FITIn test suite.
#
#   Copyright (C) 2013 Marcel Heing-Becker <marcel.heing@tu-harburg.de>
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License as
#   published by the Free Software Foundation; either version 2 of the
#   License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
#   02111-1307, USA.
#
#   The GNU General Public License is contained in the file COPYING.

require "fileutils"
require "json"
require "stringio"
require "tempfile"
require "benchmark"

$LOAD_PATH << File.dirname(__FILE__)

require "rake.config"

$SUCCESS = 0

task :default => :tests

#------------------------------------------------------------------------------
task :tests => [:build_tests] do
  test_data_records.each do |test|
    run_test(test)
  end

  puts "[RESULT] #{$SUCCESS}/#{test_data_records.count} successful"
end

#------------------------------------------------------------------------------
task :clean do
  Rake::Task["clean_tests"].invoke
end

#------------------------------------------------------------------------------
task :benchmark_dhry do
  build_benchmark("dhry", ["dhry/dhry_1.c", "dhry/dhry_2.c"], "dhry")
  benchmark_for("dhry", BENCHMARK_DHRY_VG)
end

#------------------------------------------------------------------------------
task :benchmark_dhry_flops do
  build_benchmark("dhry", ["dhry/dhry_1.c", "dhry/dhry_2.c"], "dhry")
  flops_benchmark_for("dhry", BENCHMARK_DHRY_VG)
end

#------------------------------------------------------------------------------
task :benchmark_linpack do
  build_benchmark("linpack", ["linpack/linpack.c"], "linpack")
  benchmark_for("linpack", BENCHMARK_DHRY_VG)
end

#------------------------------------------------------------------------------
task :benchmark_linpack_flops do
  build_benchmark("linpack", ["linpack/linpack.c"], "linpack")
  flops_benchmark_for("linpack", BENCHMARK_DHRY_VG)
end

#------------------------------------------------------------------------------
task :clean_tests do
  test_data_records.each do |test|
    test["files"].each do |c_file|
      unlink(object_file(c_file))
    end
  end

  FileUtils.rm_rf(local(TEST_BIN))
  unlink(local(TEST_BUILT_FILE))
end

#------------------------------------------------------------------------------
task :build_tests do
  time = last_build_time

  test_data_records.each do |test|
    build_test(test, time)
  end

  set_built_marker 
end

#------------------------------------------------------------------------------
def benchmark_for(binary, fitin_vg_opts="")
  log_file = Tempfile.new(binary)

  begin
    puts "[RUN] #{binary} without Valgrind"
    time1 = Benchmark.realtime do
      BENCHMARK_RUNS.times do
        print "* "
        run_alone(binary)
        File.unlink(benchmark_result_file(binary))
      end
    end
    puts "\n[RESULT] avg: #{time1/BENCHMARK_RUNS}s"

    puts "[RUN] #{binary} with Valgrind and --tool=none"
    time2 = Benchmark.realtime do
      BENCHMARK_RUNS.times do
        print "* "
        run_none(binary, log_file)
        File.unlink(benchmark_result_file(binary))
      end
    end
    puts "\n[RESULT] avg: #{time2/BENCHMARK_RUNS}s"

    puts "[RUN] #{binary} with Valgrind and --tool=fitin"
    time3 = Benchmark.realtime do
      BENCHMARK_RUNS.times do
        print "* "
        run_fitin(binary, log_file, fitin_vg_opts)
        File.unlink(benchmark_result_file(binary))
      end
    end
    puts "\n[RESULT] avg: #{time3/BENCHMARK_RUNS}s"
  ensure
    log_file.close
    File.unlink(log_file.path)
  end
end

#------------------------------------------------------------------------------
def flops_benchmark_for(binary, fitin_vg_opts="")
  log_file = Tempfile.new(binary)

  begin
    sum = 0
    puts "[RUN] #{binary} without Valgrind"
    BENCHMARK_RUNS.times do
      print "* "
      run_alone(binary)
      sum += read_result_file(binary)
    end
    puts "\n[RESULT] avg: #{sum/BENCHMARK_RUNS}"

    sum = 0
    puts "[RUN] #{binary} with Valgrind and --tool=none"
    BENCHMARK_RUNS.times do
      print "* "
      run_none(binary, log_file)
      sum += read_result_file(binary)
    end
    puts "\n[RESULT] avg: #{sum/BENCHMARK_RUNS}"

    sum = 0
    puts "[RUN] #{binary} with Valgrind and --tool=fitin"
    BENCHMARK_RUNS.times do
      print "* "
      run_fitin(binary, log_file, fitin_vg_opts)
      sum += read_result_file(binary)
    end
    puts "\n[RESULT] avg: #{sum/BENCHMARK_RUNS}"
  ensure
    log_file.close
    File.unlink(log_file.path)
  end
end

#------------------------------------------------------------------------------
def run_alone(binary)
  silent { %x(#{bin_output(binary)} N > /dev/null 2> /dev/null) }
end

#------------------------------------------------------------------------------
def run_none(binary, log_file)
  silent { %x(#{VALGRIND} --log-file=#{log_file.path} --tool=none #{bin_output(binary)} N > /dev/null 2> /dev/null) }
end

#------------------------------------------------------------------------------
def run_fitin(binary, log_file, opts="")
  silent { %x(#{VALGRIND} --log-file=#{log_file.path} --tool=fitin #{opts} --include=$PWD/#{binary} #{bin_output(binary)} N > /dev/null 2> /dev/null) }
end

#------------------------------------------------------------------------------
def read_result_file(binary)
  file = benchmark_result_file(binary)
  case binary
  when "linpack"
    read_linpack_result_file(file)
  when "dhry"
    read_dhry_result_file(file)
  end
end

#------------------------------------------------------------------------------
def read_linpack_result_file(file)
  contents = File.read(file)
  File.unlink(file)
  if contents =~ /^\s*Speed\s+(\d+\.\d+)\s+MFLOPS/
    $1.to_f
  else
    0
  end
end

#------------------------------------------------------------------------------
def read_dhry_result_file(file)
  contents = File.read(file)
  File.unlink(file)
  if contents =~ /^\s*VAX\sMIPS\srating:\s+(\d+\.\d+)/
    $1.to_f
  else
    0
  end
end

#------------------------------------------------------------------------------
def analyze_output(out, expected)
  normalized = out.chop.gsub(/\n/, " ")

  if !expected || normalized == expected
    $SUCCESS += 1
  else
    puts "[ERROR] expected: #{expected}, got: #{normalized}"
  end
end

#------------------------------------------------------------------------------
def bin_output(name)
  local(TEST_BIN, name)
end

#------------------------------------------------------------------------------
def build_test(test, time)
  link = false 

  begin
    test["files"].each do |src|
      if !time || File.atime(src) > time
        sh "#{CC} #{CFLAGS} #{test["cflags"]} -c #{src} -o #{object_file(src)}"
        link = true
      end
    end

    if link
      FileUtils.mkdir_p(local("bin"))

      objects = test["files"].map { |src| object_file(src) }
      sh "#{CC} #{LDFLAGS} #{test["ldflags"]} -o #{bin_output(test["output"])} #{objects.join(" ")}"
    end
  rescue
    puts "[ERROR] Building of test #{test["output"]} failed"
  end
end

#------------------------------------------------------------------------------
def build_benchmark(dir, files, target)
  build_cpuid(dir)
  begin
    files.each do |src|
      sh "#{CC} #{CFLAGS} -g3 -m32 -c #{src} -o #{object_file(src)}"
    end
    objects = files.map { |src| object_file(src) }
    objects += ["cpuid.o", cpuida(dir)]
    sh "#{CC} #{LDFLAGS} -m32 -lm -lrt -lc -o #{bin_output(target)} #{objects.join(" ")}"
  rescue
    puts "[ERROR] Building of benchmark #{target} failed"
  end
end

#------------------------------------------------------------------------------
def build_cpuid(dir)
  bits = platform_width
  file = File.join(dir, "common_#{bits}bit", "cpuidc#{bits == "64" ? "64" : ""}.c")
  sh "#{CC} #{CFLAGS} -m32 -c #{file} -o cpuid.o"
end

#------------------------------------------------------------------------------
def cpuida(dir)
  bits = platform_width
  File.join(dir, "common_#{bits}bit", "cpuida#{bits == "64" ? "64" : ""}.o")
end

#------------------------------------------------------------------------------
def last_build_time
  if File.exists?(local(TEST_BUILT_FILE))
    File.atime(local(TEST_BUILT_FILE))
  end
end

#------------------------------------------------------------------------------
def platform_width
  # 64 bit causes crashes on full --include= :(
  #if CFLAGS =~ /-m(\d{2})/
  #  return $1
  #end

  "32"
end

#------------------------------------------------------------------------------
def local(*args)
  File.join(File.dirname(__FILE__), args)
end

#------------------------------------------------------------------------------
def object_file(c_file)
  "#{File.basename(c_file, ".c")}.o"
end

#------------------------------------------------------------------------------
def run_test(test)
  puts "[RUN] #{test["title"]} (#{test["output"]})" 
  # this will suppress more output of VG
  log_file = Tempfile.new(test["output"])
  out = ""

  begin
    silent do 
      out = %x(#{VALGRIND} --log-file=#{log_file.path} #{VG_FLAGS} #{test["vg_params"]} #{bin_output(test["output"])} 2>&1)
    end

    if $?.exitstatus == 0
      analyze_output(out, test["expected"])
    else
      puts "[ERROR] Program returned exit code #{$?.exitstatus}"
    end
  ensure
    log_file.close
    File.unlink(log_file.path)
  end
end

#------------------------------------------------------------------------------
def set_built_marker
  sh "touch #{local(TEST_BUILT_FILE)}"
end

#------------------------------------------------------------------------------
def silent(&block)
  stdout = $stdout
  stderr = $stderr
  $stderr = $stdout = StringIO.new

  begin
    yield
  ensure
    $stdout = stdout
    $stderr = stderr
  end
end

#------------------------------------------------------------------------------
def test_data_records
  data = JSON.parse(File.read(local(TEST_DATA)))

  data["tests"]
end

#------------------------------------------------------------------------------
def unlink(file)
  if File.exists?(file)
    File.unlink(file)
  end
end

#------------------------------------------------------------------------------
def benchmark_result_file(binary)
  "#{binary.capitalize}.txt"
end
